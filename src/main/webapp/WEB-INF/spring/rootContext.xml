<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<!-- DB연결 -->
	<bean id="dataSource"
			class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:XE" />
		<property name="username" value="community" />
		<property name="password" value="community" />
	</bean>
	
	<!-- MyBatis 설정 -->
	<!-- MyBatis가 DB에 접속할 수 있도록 도와주는 설정 -->
	<!-- classpath:는 application에서 최상단임 src/main/java 이게 classpath임-->
	<bean	id="sqlSessionFactory"
			class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:/mybatis/mybatis.xml"/>		
	</bean>
	
	
	<!-- MyBatis가 DB에 Query(SQL)를 실행하고, 결과를 받아오게 도와주는 설정 -->
	<!-- 빨간줄이 나오는 이유는 1. 클래스가 없다, 2.생성자가 필요하다 -->
	<bean	id="sqlSessionTemplate"
			class="org.mybatis.spring.SqlSessionTemplate" >
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<!-- Transaction 설정(commint, rollback 설정) -->
	<bean	id="transactionManager"
			class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- rollback rule set up-->
	<tx:advice id="rollbackRule" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="create*" rollback-for="RuntimeException"/>
			<tx:method name="read*" rollback-for="RuntimeException"/>
			<tx:method name="delete*" rollback-for="RuntimeException"/>
			<tx:method name="update*" rollback-for="RuntimeException"/>
			<tx:method name="increment*" rollback-for="RuntimeException"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- Transaction 대상 설정 -->
	<!-- 관점지향프로그래밍? 무슨 상황일때 프로그램이 알아서 동작하게 만드는 방법이래-->
	<!-- expression= 누구에게 롤백 룰을 적용할 것인가 적어줘야함 -->
	<aop:config>
		<aop:pointcut	id="pointCut" 
						expression="execution(public * com.ktds..service.*ServiceImpl.*(..))" />
		<aop:advisor advice-ref="rollbackRule" pointcut-ref="pointCut"/>
	</aop:config>
	
</beans>
